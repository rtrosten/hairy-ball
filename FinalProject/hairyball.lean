import Mathlib

open RealInnerProductSpace

notation "E" n:30 => EuclideanSpace ‚Ñù (Fin n)

structure IsSphVF {n : ‚Ñï} (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) where
  diff : ContDiff ‚Ñù ‚ä§ v
  perp : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí ‚ü™x, v x‚ü´ = 0

structure IsEqvSphVF {n : ‚Ñï}
  (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) extends IsSphVF v where
  equiv : ‚àÄ r > (0 : ‚Ñù), ‚àÄ x, v (r ‚Ä¢ x) = r ‚Ä¢ v x

open Polynomial MeasureTheory Metric ENNReal Topology

def IsPolynomialFun (f : ‚Ñù ‚Üí ‚Ñù) := ‚àÉ P : ‚Ñù[X], f = P.eval

example (P Q : ‚Ñù[X]) (h : P.eval = Q.eval) : P = Q := Polynomial.funext (congrFun h)

lemma c1_implies_lipschitz (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : Convex ‚Ñù A) : ‚àÉ K : NNReal, LipschitzWith K (Set.restrict A v) := by

  sorry

lemma sqrt_poly {n} (h : IsPolynomialFun (fun x ‚Ü¶ (1 + x^2)^(n / 2))) : Even n := by
  let q : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ (1 + x^2)^(n / 2 : ‚Ñù)
  have hq : IsPolynomialFun (q * q) := by
    use (1 + X^2)^n
    ext z
    simp
    rw [‚Üê Real.rpow_add, ‚Üê Real.rpow_nat_cast]
    field_simp
    positivity
  rcases hq with ‚ü®k, hk‚ü©

  have h : ‚àÄ (x : ‚Ñù) (p * p - q * q).eval x = 0 := sorry
  have bruh := zero_of_eval_zero p*p-q*q
  sorry

lemma poly_transform (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : IsCompact A) :
  ‚àÄ·∂† t in ùìù 0, (Function.Injective (fun x : A ‚Ü¶ x + t ‚Ä¢ (v x)) ‚àß
  IsPolynomialFun (fun t ‚Ü¶ volume ((fun x : A ‚Ü¶ x + t ‚Ä¢ (v x))''A))) := sorry

theorem hairy_ball_aux {n} {v : E n ‚Üí E n} (h : IsEqvSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) : Even n := sorry

theorem hairy_ball {n} {v : E n ‚Üí E n} (h : IsSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) : Even n := sorry



#check volume (ball (0 : E 3) 1)
