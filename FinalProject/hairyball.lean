import Mathlib

noncomputable section

open RealInnerProductSpace

notation "E" n:30 => EuclideanSpace ‚Ñù (Fin n)



structure IsSphVF {n : ‚Ñï} (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) where
  diff : ContDiff ‚Ñù ‚ä§ v
  perp : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí ‚ü™x, v x‚ü´ = 0

structure IsEqvSphVF {n : ‚Ñï}
  (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) extends IsSphVF v where
  equiv : ‚àÄ r > (0 : ‚Ñù), ‚àÄ x, v (r ‚Ä¢ x) = r ‚Ä¢ v x

open Polynomial MeasureTheory Metric ENNReal Topology Set Filter Function

def suff_small_inj {n} (f: ‚Ñù ‚Üí E n ‚Üí E n) := ‚àÄ·∂† t in ùìù (0:‚Ñù), Injective (f t)
def suff_small_surj {n} (f: ‚Ñù ‚Üí E n ‚Üí E n) := ‚àÄ·∂† t in ùìù (0:‚Ñù), Surjective (f t)
def IsPolynomialFun (f : ‚Ñù ‚Üí ‚Ñù) := ‚àÉ P : ‚Ñù[X], f = P.eval

example (P Q : ‚Ñù[X]) (h : P.eval = Q.eval) : P = Q := Polynomial.funext (congrFun h)

-- some examples of using ‚àÄ·∂†, thanks Prof. Massot!
example {K : ‚Ñù} (hK : K > 0) : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), K*|t| < 1 := by
  have F‚ÇÅ : ‚àÄ t ‚àà Ioo (-(1/K)) (1/K), K*|t| < 1 := by
    intro t ht
    have : |t| < 1/K := abs_lt.mpr ht
    rwa [lt_div_iff' hK] at this
  have F‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), t ‚àà Ioo (-(1/K)) (1/K) := by
    refine Ioo_mem_nhds ?ha ?hb <;> simp [hK]
  exact  F‚ÇÇ.mono F‚ÇÅ


example {K : ‚Ñù} : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), K*|t| < 1 := by
  have F‚ÇÅ : Tendsto (fun t ‚Ü¶ K*|t|) (ùìù 0) (ùìù 0) := by
    suffices Tendsto (fun t ‚Ü¶ K*|t|) (ùìù 0) (ùìù (K*0)) by simpa
    refine Tendsto.const_mul K ?h
    suffices Tendsto (fun t : ‚Ñù ‚Ü¶ |t|) (ùìù 0) (ùìù (|0|)) by simpa
    exact continuous_abs.continuousAt
  have F‚ÇÇ : Iio (1 : ‚Ñù) ‚àà ùìù 0 := Iio_mem_nhds zero_lt_one
  exact F‚ÇÅ.eventually F‚ÇÇ


lemma smooth_imp_c1 {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) : ContDiff ‚Ñù 1 v :=
  hv.of_le le_top

lemma c1_implies_lipschitz {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) : ‚àÉ K > 0, LipschitzWith K v := by sorry

lemma c1_implies_lipschitz2 {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : Convex ‚Ñù A) : ‚àÉ K : NNReal, LipschitzWith K (Set.restrict A v) := by
  sorry

lemma sqrt_poly {n} (h : IsPolynomialFun (fun x ‚Ü¶ (1+x^2)^(n/2))) : Even n := by

  let q : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ (1 + x^2)^(n/2 : ‚Ñù)
  have hq : IsPolynomialFun (q*q) := by
    use (1+X^2)^n
    ext z
    simp
    rw [‚Üê Real.rpow_add, ‚Üê Real.rpow_nat_cast]
    field_simp
    positivity
  rcases hq with ‚ü®k, hk‚ü©
  sorry

-- lemma poly_transform {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : IsCompact A) :
--   ‚àÄ·∂† t in ùìù 0, (Function.Injective (fun x : A ‚Ü¶ x + t ‚Ä¢ (v x)) ‚àß
--   IsPolynomialFun (fun t ‚Ü¶ volume ((fun x : A ‚Ü¶ x + t ‚Ä¢ (v x))'' A))) := sorry

theorem hairy_ball_aux {n} {v : E n ‚Üí E n} (h : IsEqvSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) : Even n := sorry


lemma norm_sub_norm_le'' {F : Type*} [SeminormedAddGroup F] (a b : F) : ‚Äña‚Äñ - ‚Äñb‚Äñ ‚â§ ‚Äña + b‚Äñ := by
  convert norm_sub_norm_le a (-b) using 1 <;> simp

def f {n} (v : E n ‚Üí E n) (t : ‚Ñù) (x : E n) : E n := x + t ‚Ä¢ (v x)

lemma f_inj {n} {v : E n ‚Üí E n} (h : IsSphVF v) : suff_small_inj (f v) := by
  rcases (c1_implies_lipschitz v h.diff) with ‚ü®K, hK‚ü©
  have hK‚ÇÅ := hK.1
  have hK‚ÇÇ := hK.2
  have F‚ÇÅ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), ‚àÉC > 0, AntilipschitzWith (C : NNReal) (f v t) := by
    have G‚ÇÅ : ‚àÄ t, ‚àÄ x y : E n, ‚Äñf v t x - f v t y‚Äñ ‚â• (1-(K:‚Ñù)*|t|) * ‚Äñx-y‚Äñ := by
      intro t x y
      calc
        ‚Äñf v t x - f v t y‚Äñ = ‚Äñx - y + t ‚Ä¢ (v x - v y)‚Äñ := by congr 1; rw [smul_sub]; dsimp [f]; abel
        _ ‚â• ‚Äñx-y‚Äñ - ‚Äñt ‚Ä¢ (v x - v y)‚Äñ := by apply norm_sub_norm_le''
        _ = ‚Äñx-y‚Äñ - |t| * ‚Äñv x - v y‚Äñ := by rw [norm_smul, Real.norm_eq_abs]
        _ ‚â• ‚Äñx-y‚Äñ - |t| * (K * ‚Äñx-y‚Äñ) := by gcongr ; apply hK‚ÇÇ.dist_le_mul
        _ = (1-K*|t|)*‚Äñx-y‚Äñ := by linarith

    have G‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), (K:‚Ñù)*|t| < 1 := by
      have H‚ÇÅ : ‚àÄ t ‚àà Ioo (-(1/(K:‚Ñù))) (1/(K:‚Ñù)), K*|t| < 1 := by
        intro t ht
        have : |t| < 1/K := abs_lt.mpr ht
        have hK‚ÇÅ' : (0 : ‚Ñù) < K := by exact_mod_cast hK‚ÇÅ
        rwa [lt_div_iff' hK‚ÇÅ'] at this
      have H‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), t ‚àà Ioo (-(1/(K:‚Ñù))) (1/(K:‚Ñù)) := by
        refine Ioo_mem_nhds ?ha ?hb <;> simp [hK]
      exact H‚ÇÇ.mono H‚ÇÅ

    have G‚ÇÉ : ‚àÄ (t : ‚Ñù), (K:‚Ñù) * |t| < 1 ‚Üí 1 - (K:‚Ñù) * |t| > 0 := by
      intro t ht
      linarith

    have G‚ÇÑ := G‚ÇÇ.mono G‚ÇÉ

    have G‚ÇÖ : ‚àÄ (t : ‚Ñù), 1-(K:‚Ñù) * |t| > 0 ‚Üí ‚àÉ C > 0, AntilipschitzWith C (f v t) := by
      intro t ht
      use 1/‚ü®1-K*|t|, ht.le‚ü©
      constructor
      ¬∑ exact one_div_pos.mpr ht
      ¬∑ rw [antilipschitzWith_iff_le_mul_dist]
        peel G‚ÇÅ t with H y x
        field_simp
        exact (le_div_iff' ht).mpr (G‚ÇÅ t y x)

    exact G‚ÇÑ.mono G‚ÇÖ

  have F‚ÇÇ : ‚àÄ t, (‚àÉ C > 0, AntilipschitzWith C (f v t)) ‚Üí Injective (f v t) := by
    intro t hc
    rcases hc with ‚ü®c,_,hcc‚ü©
    apply AntilipschitzWith.injective
    exact hcc

  exact F‚ÇÅ.mono F‚ÇÇ

lemma f_surj {n} {v : E n ‚Üí E n} (h : IsSphVF v) (hv : ‚àÄ u : E n, ‚Äñu‚Äñ = 1 ‚Üí ‚Äñv u‚Äñ = 1): ‚àÄ·∂† t in ùìù (0 : ‚Ñù), (‚àÄ u : E n, ‚Äñu‚Äñ = 1 ‚Üí ‚Äñf v t u‚Äñ = Real.sqrt (1 + t^2))
  ‚àß (‚àÄ u' : E n, ‚Äñu'‚Äñ = Real.sqrt (1 + t^2) ‚Üí ‚àÉ u : E n, ‚Äñu‚Äñ = 1 ‚àß f v t u = u') := by
  have fact : ‚àÄ t : ‚Ñù, ‚àÄ u : E n, ‚Äñu‚Äñ = 1 ‚Üí ‚Äñf v t u‚Äñ^2 = 1 + t^2 := by
    intro t u hu
    calc ‚Äñf v t u‚Äñ^2 = ‚Äñu + t ‚Ä¢ v u‚Äñ^2 := by congr
      _ = ‚Äñu‚Äñ^2 + 2 * ‚ü™u, (t ‚Ä¢ v u)‚ü´ + ‚Äñt ‚Ä¢ v u‚Äñ^2 := norm_add_sq_real u (t ‚Ä¢ v u)
      _ = ‚Äñu‚Äñ^2  + ‚Äñt ‚Ä¢ v u‚Äñ^2 := by
        simp [-PiLp.inner_apply, real_inner_smul_right, h.perp _ hu]
      _ = 1 + ‚Äñt ‚Ä¢ v u‚Äñ^2 := by
        rw [hu]
        simp
      _ = 1 + t^2 * ‚Äñv u‚Äñ^2 := by
        rw [norm_smul, mul_pow]
        simp
      _ = 1 + t^2 := by
        rw [hv u hu]
        simp
  let g := fun v t x ‚Ü¶ (1 / (Real.sqrt (1 + t^2))) ‚Ä¢ (f (n := n) v t x)
  have restrict : g '' {x : E n | ‚Äñx‚Äñ = 1} ‚äÜ {x : E n | ‚Äñx‚Äñ = 1} := by
  sorry

theorem hairy_ball {n} {v : E n ‚Üí E n} (h : IsSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) (h'' :
‚àÄ x, ‚Äñv x‚Äñ = 1) : Even n := by
  have ss_inj : suff_small_inj (f v) := f_inj h
  sorry




#check volume (ball (0 : E 3) 1)
