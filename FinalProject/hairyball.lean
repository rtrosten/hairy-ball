import Mathlib

noncomputable section

open RealInnerProductSpace
open Polynomial MeasureTheory Metric ENNReal Topology Set Filter Function

notation "E" n:30 => EuclideanSpace ‚Ñù (Fin n)
notation "S" n:30 "_(" r:10 ")" => Metric.sphere (0 : EuclideanSpace ‚Ñù (Fin n)) r


structure IsSphVF {n : ‚Ñï} (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) where
  diff : ContDiff ‚Ñù ‚ä§ v
  perp : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí ‚ü™x, v x‚ü´ = 0

structure IsEqvSphVF {n : ‚Ñï}
  (v : EuclideanSpace ‚Ñù (Fin n) ‚Üí EuclideanSpace ‚Ñù (Fin n)) extends IsSphVF v where
  equiv : ‚àÄ r > (0 : ‚Ñù), ‚àÄ x, v (r ‚Ä¢ x) = r ‚Ä¢ v x



def suff_small_inj {n} (f: ‚Ñù ‚Üí E n ‚Üí E n) := ‚àÄ·∂† t in ùìù (0:‚Ñù), Injective (f t)
def suff_small_surj {n} (f: ‚Ñù ‚Üí E n ‚Üí E n) := ‚àÄ·∂† t in ùìù (0:‚Ñù), Surjective (f t)
def IsPolynomialFun (f : ‚Ñù ‚Üí ‚Ñù) := ‚àÉ P : ‚Ñù[X], f = P.eval

example (P Q : ‚Ñù[X]) (h : P.eval = Q.eval) : P = Q := Polynomial.funext (congrFun h)

-- some examples of using ‚àÄ·∂†, thanks Prof. Massot!
example {K : ‚Ñù} (hK : K > 0) : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), K*|t| < 1 := by
  have F‚ÇÅ : ‚àÄ t ‚àà Ioo (-(1/K)) (1/K), K*|t| < 1 := by
    intro t ht
    have : |t| < 1/K := abs_lt.mpr ht
    rwa [lt_div_iff' hK] at this
  have F‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), t ‚àà Ioo (-(1/K)) (1/K) := by
    refine Ioo_mem_nhds ?ha ?hb <;> simp [hK]
  exact  F‚ÇÇ.mono F‚ÇÅ


example {K : ‚Ñù} : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), K*|t| < 1 := by
  have F‚ÇÅ : Tendsto (fun t ‚Ü¶ K*|t|) (ùìù 0) (ùìù 0) := by
    suffices Tendsto (fun t ‚Ü¶ K*|t|) (ùìù 0) (ùìù (K*0)) by simpa
    refine Tendsto.const_mul K ?h
    suffices Tendsto (fun t : ‚Ñù ‚Ü¶ |t|) (ùìù 0) (ùìù (|0|)) by simpa
    exact continuous_abs.continuousAt
  have F‚ÇÇ : Iio (1 : ‚Ñù) ‚àà ùìù 0 := Iio_mem_nhds zero_lt_one
  exact F‚ÇÅ.eventually F‚ÇÇ


lemma smooth_imp_c1 {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) : ContDiff ‚Ñù 1 v :=
  hv.of_le le_top

lemma c1_implies_lipschitz {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) : ‚àÉ K > 0, LipschitzWith K v := by sorry

lemma c1_implies_lipschitz2 {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : Convex ‚Ñù A) : ‚àÉ K : NNReal, LipschitzWith K (Set.restrict A v) := by
  sorry

lemma sqrt_poly {n} (h : IsPolynomialFun (fun x ‚Ü¶ (1+x^2)^(n/2))) : Even n := by

  let q : ‚Ñù ‚Üí ‚Ñù := fun x ‚Ü¶ (1 + x^2)^(n/2 : ‚Ñù)
  have hq : IsPolynomialFun (q*q) := by
    use (1+X^2)^n
    ext z
    simp
    rw [‚Üê Real.rpow_add, ‚Üê Real.rpow_nat_cast]
    field_simp
    positivity
  rcases hq with ‚ü®k, hk‚ü©
  sorry

-- lemma poly_transform {n} (v : E n ‚Üí E n) (hv : ContDiff ‚Ñù ‚ä§ v) (A : Set (E n)) (hA : IsCompact A) :
--   ‚àÄ·∂† t in ùìù 0, (Function.Injective (fun x : A ‚Ü¶ x + t ‚Ä¢ (v x)) ‚àß
--   IsPolynomialFun (fun t ‚Ü¶ volume ((fun x : A ‚Ü¶ x + t ‚Ä¢ (v x))'' A))) := sorry

theorem hairy_ball_aux {n} {v : E n ‚Üí E n} (h : IsEqvSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) : Even n := sorry


lemma norm_sub_norm_le'' {F : Type*} [SeminormedAddGroup F] (a b : F) : ‚Äña‚Äñ - ‚Äñb‚Äñ ‚â§ ‚Äña + b‚Äñ := by
  convert norm_sub_norm_le a (-b) using 1 <;> simp

def f {n} (v : E n ‚Üí E n) (t : ‚Ñù) (x : E n) : E n := x + t ‚Ä¢ (v x)

def H {n} (t : ‚Ñù) (x : E n) : E n := t ‚Ä¢ x

lemma f_inj {n} {v : E n ‚Üí E n} (h : IsSphVF v) : suff_small_inj (f v) := by
  rcases (c1_implies_lipschitz v h.diff) with ‚ü®K, hK‚ü©
  have hK‚ÇÅ := hK.1
  have hK‚ÇÇ := hK.2
  have F‚ÇÅ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), ‚àÉC > 0, AntilipschitzWith (C : NNReal) (f v t) := by
    have G‚ÇÅ : ‚àÄ t, ‚àÄ x y : E n, ‚Äñf v t x - f v t y‚Äñ ‚â• (1-(K:‚Ñù)*|t|) * ‚Äñx-y‚Äñ := by
      intro t x y
      calc
        ‚Äñf v t x - f v t y‚Äñ = ‚Äñx - y + t ‚Ä¢ (v x - v y)‚Äñ := by congr 1; rw [smul_sub]; dsimp [f]; abel
        _ ‚â• ‚Äñx-y‚Äñ - ‚Äñt ‚Ä¢ (v x - v y)‚Äñ := by apply norm_sub_norm_le''
        _ = ‚Äñx-y‚Äñ - |t| * ‚Äñv x - v y‚Äñ := by rw [norm_smul, Real.norm_eq_abs]
        _ ‚â• ‚Äñx-y‚Äñ - |t| * (K * ‚Äñx-y‚Äñ) := by gcongr ; apply hK‚ÇÇ.dist_le_mul
        _ = (1-K*|t|)*‚Äñx-y‚Äñ := by linarith

    have G‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), (K:‚Ñù)*|t| < 1 := by
      have H‚ÇÅ : ‚àÄ t ‚àà Ioo (-(1/(K:‚Ñù))) (1/(K:‚Ñù)), K*|t| < 1 := by
        intro t ht
        have : |t| < 1/K := abs_lt.mpr ht
        have hK‚ÇÅ' : (0 : ‚Ñù) < K := by exact_mod_cast hK‚ÇÅ
        rwa [lt_div_iff' hK‚ÇÅ'] at this
      have H‚ÇÇ : ‚àÄ·∂† t in ùìù (0 : ‚Ñù), t ‚àà Ioo (-(1/(K:‚Ñù))) (1/(K:‚Ñù)) := by
        refine Ioo_mem_nhds ?ha ?hb <;> simp [hK]
      exact H‚ÇÇ.mono H‚ÇÅ

    have G‚ÇÉ : ‚àÄ (t : ‚Ñù), (K:‚Ñù) * |t| < 1 ‚Üí 1 - (K:‚Ñù) * |t| > 0 := by
      intro t ht
      linarith

    have G‚ÇÑ := G‚ÇÇ.mono G‚ÇÉ

    have G‚ÇÖ : ‚àÄ (t : ‚Ñù), 1-(K:‚Ñù) * |t| > 0 ‚Üí ‚àÉ C > 0, AntilipschitzWith C (f v t) := by
      intro t ht
      use 1/‚ü®1-K*|t|, ht.le‚ü©
      constructor
      ¬∑ exact one_div_pos.mpr ht
      ¬∑ rw [antilipschitzWith_iff_le_mul_dist]
        peel G‚ÇÅ t with H y x
        field_simp
        exact (le_div_iff' ht).mpr (G‚ÇÅ t y x)

    exact G‚ÇÑ.mono G‚ÇÖ

  have F‚ÇÇ : ‚àÄ t, (‚àÉ C > 0, AntilipschitzWith C (f v t)) ‚Üí Injective (f v t) := by
    intro t hc
    rcases hc with ‚ü®c,_,hcc‚ü©
    apply AntilipschitzWith.injective
    exact hcc

  exact F‚ÇÅ.mono F‚ÇÇ

lemma annulem {n} : {x : E n | 0.5 ‚â§ ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ ‚â§ 1.5} = ‚ãÉ (r ‚àà Icc (0.5: ‚Ñù) (1.5: ‚Ñù)), {x : E n | ‚Äñx‚Äñ = r}  := by
  ext y
  constructor
  ¬∑ intro hy
    dsimp at *
    rw [mem_iUnion]
    simp [hy]
  ¬∑ intro hy
    rw [mem_iUnion] at hy
    rcases hy with ‚ü®s, hy‚ü©
    rw [mem_iUnion] at hy
    rcases hy with ‚ü®w, hw‚ü©
    rw [mem_setOf_eq, hw]
    exact w

@[simp]
lemma srqt_pos (t : ‚Ñù) : 0 < Real.sqrt (1 + t^2) := by
  refine Real.sqrt_pos.mpr ?_ -- suggested by apply?
  positivity -- gets rid of obvious positivity goals.

open Real

lemma norm_f {n} {v : E n ‚Üí E n} (hv : ‚àÄ x : E n, ‚Äñv x‚Äñ = ‚Äñx‚Äñ ‚àß ‚ü™x, v x‚ü´ = 0) (t : ‚Ñù) (x : E n) :
    ‚Äñf v t x‚Äñ = ‚Äñx‚Äñ * sqrt (1 + t^2) := by
  have square : ‚Äñx + t ‚Ä¢ v x‚Äñ^2 = ‚Äñx‚Äñ^2 * (1 + t^2) := by
    calc ‚Äñx + t ‚Ä¢ v x‚Äñ^2 = ‚Äñx‚Äñ^2 + 2 * ‚ü™x, (t ‚Ä¢ v x)‚ü´ + ‚Äñt ‚Ä¢ v x‚Äñ^2 := norm_add_sq_real x (t ‚Ä¢ v x)
      _ = ‚Äñx‚Äñ^2 + ‚Äñt ‚Ä¢ v x‚Äñ^2 := by simp [-PiLp.inner_apply, real_inner_smul_right, (hv x).right]
      _ = ‚Äñx‚Äñ^2 + t^2 * ‚Äñx‚Äñ^2 := by simp [norm_smul, mul_pow, (hv x).left]
      _ = ‚Äñx‚Äñ^2 * (1 + t^2) := by ring
  calc ‚Äñx + t ‚Ä¢ v x‚Äñ = sqrt (‚Äñx‚Äñ^2 * (1 + t^2)) := by rw [eq_comm, sqrt_eq_iff_sq_eq, square] <;> positivity
    _ = sqrt (‚Äñx‚Äñ^2) * sqrt (1 + t^2) := by apply sqrt_mul; positivity
    _ = ‚Äñx‚Äñ * sqrt (1 + t^2) := by rw [sqrt_sq]; positivity

lemma norm_f_on_sphere {n} {v : E n ‚Üí E n} (hv : ‚àÄ x : E n, ‚Äñv x‚Äñ = ‚Äñx‚Äñ ‚àß ‚ü™x, v x‚ü´ = 0)
    (t : ‚Ñù) (u : E n) (hu : ‚Äñu‚Äñ = 1) : ‚Äñf v t u‚Äñ = sqrt (1 + t^2) := by
  simp [norm_f hv t u, hu]

lemma f_surj {n} {v : E n ‚Üí E n} (h : IsSphVF v) (hv : ‚àÄ x : E n, ‚Äñv x‚Äñ = ‚Äñx‚Äñ ‚àß ‚ü™x, v x‚ü´ = 0) (hv' : ‚àÄ r : ‚Ñù, ‚àÄ x : E n, v (r ‚Ä¢ x) = r ‚Ä¢ v x) :
    ‚àÄ·∂† t in ùìù (0 : ‚Ñù), ‚àÄ u' : E n, ‚Äñu'‚Äñ = sqrt (1 + t^2) ‚Üí ‚àÉ u : E n, ‚Äñu‚Äñ = 1 ‚àß f v t u = u' := by
  have LipCst : ‚àÉ K > 0, LipschitzWith K (Set.restrict {x : E n | 1/2 ‚â§ ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ ‚â§ 3/2} v) := by sorry -- This is that Lip on compact thing
  rcases LipCst with ‚ü®K, hvK‚ü©
  have point : ‚àÄ t : ‚Ñù, |t| < 1/3 ‚àß |t| < 1/K ‚Üí ‚àÄ u' : E n, ‚Äñu'‚Äñ = sqrt (1 + t^2) ‚Üí ‚àÉ u : E n, ‚Äñu‚Äñ = 1 ‚àß f v t u = u' := by
    intro t ht u' hu'
    have hu'' : ‚Äñu'‚Äñ = |sqrt (1 + t^2)| := by
      rw [hu']
      exact (LatticeOrderedGroup.abs_of_nonneg (sqrt (1 + t^2)) (sqrt_nonneg (1 + t ^ 2))).symm
    have calculation : |1/(sqrt (1 + t^2))| * |sqrt (1 + t^2)| = 1 := by
      field_simp [abs_one_div]
    unfold f
    let A := {x : E n | 1/2 ‚â§ ‚Äñx‚Äñ ‚àß ‚Äñx‚Äñ ‚â§ 3/2}

    have complete : IsComplete A := by
      apply IsClosed.isComplete
      have h_1 : IsClosed {x : E n | 1/2 ‚â§ ‚Äñx‚Äñ} := by sorry
      have h_2 : IsClosed {x : E n | ‚Äñx‚Äñ ‚â§ 3/2} := by sorry
      apply IsClosed.inter h_1 h_2
    let g‚ÇÄ := fun x : E n ‚Ü¶ (1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v x
    have hg‚ÇÄ : Set.MapsTo g‚ÇÄ A A := by
      intro x hx
      have : |t| * ‚Äñ(x : E n)‚Äñ ‚â§ 1/2 := by
        calc |t| * ‚Äñ(x : E n)‚Äñ ‚â§ 1/3 * 3/2 := by sorry
          _ = 1/2 := by ring
      have : 1 - 1/2 ‚â§ 1 - |t| * ‚Äñ(x : E n)‚Äñ := by
        sorry
      constructor
      ¬∑ dsimp
        calc 1/2 = 1 - 1/2 := by ring
          _ ‚â§ |1/(sqrt (1 + t^2))| * ‚Äñu'‚Äñ - |t| * ‚Äñ(x : E n)‚Äñ := by
            rw [hu'', calculation]
            exact this
          _ = ‚Äñ(1/(sqrt (1 + t^2))) ‚Ä¢ u'‚Äñ - ‚Äñt ‚Ä¢ v x‚Äñ := by
            rw [norm_smul, norm_smul, (hv x).1] ; rfl
          _ ‚â§ |‚Äñ(1/(sqrt (1 + t^2))) ‚Ä¢ u'‚Äñ - ‚Äñt ‚Ä¢ v x‚Äñ| := le_abs_self (‚Äñ(1 / sqrt (1 + t ^ 2)) ‚Ä¢ u'‚Äñ - ‚Äñt ‚Ä¢ v ‚Üëx‚Äñ)
          _ ‚â§ ‚Äñ(1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v x‚Äñ := by apply abs_norm_sub_norm_le
      ¬∑ dsimp
        calc ‚Äñ(1 / sqrt (1 + t ^ 2)) ‚Ä¢ u' - t ‚Ä¢ v ‚Üëx‚Äñ ‚â§ ‚Äñ(1 / sqrt (1 + t ^ 2)) ‚Ä¢ u'‚Äñ + ‚Äñt ‚Ä¢ v ‚Üëx‚Äñ := by sorry
          _ ‚â§ 1 + t * ‚Äñ(x : E n)‚Äñ := by sorry
          _ ‚â§ 3/2 := by sorry
    have pos : 0 ‚â§ |t| * (K : ‚Ñù) := by sorry
    have pos' : Real.toNNReal (|t| * (K : ‚Ñù)) = |t| * (K : ‚Ñù) := Real.coe_toNNReal (|t| * (K : ‚Ñù)) pos
    have contract : ContractingWith (Real.toNNReal (|t| * (K : ‚Ñù))) (Set.MapsTo.restrict g‚ÇÄ A A hg‚ÇÄ) := by
      constructor
      ¬∑ sorry
      ¬∑ intro x y
        have simplify‚ÇÄ : edist (MapsTo.restrict g‚ÇÄ A A hg‚ÇÄ x) (MapsTo.restrict g‚ÇÄ A A hg‚ÇÄ y) = ENNReal.ofReal ‚Äñg‚ÇÄ x - g‚ÇÄ y‚Äñ := by sorry
        have simplify‚ÇÅ : ENNReal.toReal (ENNReal.ofReal ‚Äñg‚ÇÄ x - g‚ÇÄ y‚Äñ) = ‚Äñg‚ÇÄ x - g‚ÇÄ y‚Äñ := by sorry
        rw [simplify‚ÇÄ]
        have key : ‚Äñg‚ÇÄ x - g‚ÇÄ y‚Äñ ‚â§ |t| * (K : ‚Ñù) * ‚Äñ(x : E n) - (y : E n)‚Äñ := by
          calc ‚Äñg‚ÇÄ x - g‚ÇÄ y‚Äñ = ‚Äñ((1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v x) - ((1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v y)‚Äñ := by rfl
            _ = ‚Äñt ‚Ä¢ v y - t ‚Ä¢ v x‚Äñ := by simp
            _ = ‚Äñt ‚Ä¢ (v y - v x)‚Äñ := by
              rw [smul_sub]
            _ = |t| * ‚Äñv y - v x‚Äñ := by
              rw [norm_smul, Real.norm_eq_abs]
            _ = |t| * ((K : ‚Ñù) * ‚Äñ(y : E n) - (x : E n)‚Äñ) := by
              --have weird : ENNReal.toReal ‚ü®‚Äñ(y : E n) - (x : E n)‚Äñ, norm_nonneg (y - x)‚ü© = edist y x := by sorry
              sorry -- very, very stuck on how to make this work
            _ = |t| * (K : ‚Ñù) * ‚Äñ(x : E n) - (y : E n)‚Äñ := by
              rw [mul_assoc]
              simp
              left
              left
              rw [‚Üê norm_neg]
              congr
              abel
          sorry
        sorry
    have duh : ‚àÉ x, x ‚àà A := by sorry
    rcases duh with ‚ü®p, hp‚ü©
    have findist : edist p (g‚ÇÄ p) ‚â† ‚ä§ := edist_ne_top p (g‚ÇÄ p)
    have key : ‚àÉ u, Function.IsFixedPt g‚ÇÄ u := by
      have banach := ContractingWith.exists_fixedPoint' complete hg‚ÇÄ contract hp findist
      rcases banach with ‚ü®u, hu‚ü©
      use u
      exact hu.right.left
    rcases key with ‚ü®u, hu‚ü©
    use (sqrt (1 + t^2)) ‚Ä¢ u
    have key' : (sqrt (1 + t^2)) ‚Ä¢ u + t ‚Ä¢ v ((sqrt (1 + t^2)) ‚Ä¢ u) = u' := by
      unfold IsFixedPt at hu
      have comp‚ÇÄ : (1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v u = u := hu
      have comp‚ÇÅ : u' - t ‚Ä¢ v ((sqrt (1 + t^2)) ‚Ä¢ u) = (sqrt (1 + t^2)) ‚Ä¢ u := by
        calc u' - t ‚Ä¢ v ((sqrt (1 + t^2)) ‚Ä¢ u) = u' - t ‚Ä¢ ((sqrt (1 + t^2)) ‚Ä¢ v u) := by rw [hv' (sqrt (1 + t^2)) u]
          _ = u' - (sqrt (1 + t^2)) ‚Ä¢ (t ‚Ä¢ v u) := by
            simp
            exact smul_algebra_smul_comm (sqrt (1 + t ^ 2)) t (v u)
          _ = (sqrt (1 + t^2)) ‚Ä¢ ((1/(sqrt (1 + t^2))) ‚Ä¢ u' - t ‚Ä¢ v u) := by
            rw [smul_sub]
            simp
            refine (smul_inv_smul‚ÇÄ ?hc u').symm
            have contra : sqrt (1 + t^2) > 0 := by
              rw [gt_iff_lt, sqrt_pos]
              calc 0 < 1 := Real.zero_lt_one
                _ ‚â§ 1 + t^2 := by refine le_add_of_nonneg_right (sq_nonneg t)
            exact ne_of_gt contra
          _ = (sqrt (1 + t^2)) ‚Ä¢ u := by rw [comp‚ÇÄ]
      nth_rw 1 [‚Üê comp‚ÇÅ]
      simp
    constructor
    ¬∑ have comp := by
        calc 1 + t^2 = (sqrt (1 + t^2))^2 := by {
          rw [Real.sq_sqrt ?_]
          calc 0 ‚â§ 1 := zero_le_one
            _ ‚â§ 1 + t^2 := by refine le_add_of_nonneg_right (sq_nonneg t)
        }
          _ = ‚Äñu'‚Äñ^2 := by rw [hu']
          _ = ‚Äñsqrt (1 + t ^ 2) ‚Ä¢ u + t ‚Ä¢ v (sqrt (1 + t ^ 2) ‚Ä¢ u)‚Äñ^2 := by rw [key']
          _ = ‚Äñsqrt (1 + t ^ 2) ‚Ä¢ u + t ‚Ä¢ ((sqrt (1 + t ^ 2)) ‚Ä¢ v u)‚Äñ^2 := by rw [hv' (sqrt (1 + t ^ 2)) u]
          _ = ‚Äñsqrt (1 + t ^ 2) ‚Ä¢ u + (sqrt (1 + t ^ 2)) ‚Ä¢ (t ‚Ä¢ v u)‚Äñ^2 := by rw [smul_algebra_smul_comm (sqrt (1 + t ^ 2)) t (v u)]
          _ = ‚Äñsqrt (1 + t^2) ‚Ä¢ (u + (t ‚Ä¢ v u))‚Äñ^2 := by rw[smul_add]
          _ = (sqrt (1 + t^2) * ‚Äñu + t ‚Ä¢ v u‚Äñ)^2 := by
            congr
            apply norm_smul_of_nonneg (sqrt_nonneg (1 + t^2)) (u + t ‚Ä¢ v u)
          _ = (sqrt (1 + t^2))^2 * ‚Äñu + t ‚Ä¢ v u‚Äñ^2 := by rw[mul_pow]
          _ = (1 + t^2) * ‚Äñu + t ‚Ä¢ v u‚Äñ^2 := by
            congr
            refine Real.sq_sqrt ?_
            calc 0 ‚â§ 1 := zero_le_one
              _ ‚â§ 1 + t^2 := by refine le_add_of_nonneg_right (sq_nonneg t)
          _ = (1 + t^2) * (‚Äñu‚Äñ * sqrt (1 + t^2))^2 := by sorry
          _ = (1 + t^2) * (sqrt (1 + t^2) * ‚Äñu‚Äñ)^2 := by
            rw [mul_comm (sqrt (1 + t^2)) ‚Äñu‚Äñ]
          _ = (1 + t^2) * (‚Äñsqrt (1 + t^2) ‚Ä¢ u‚Äñ)^2 := by
            congr
            rw [norm_smul_of_nonneg (sqrt_nonneg (1 + t^2)) u]
      have duh : 1 + t^2 ‚â† 0 := by sorry
      rw [left_eq_mul‚ÇÄ duh, sq_eq_one_iff] at comp
      rcases comp with h1 | h2
      ¬∑ exact h1
      ¬∑ exfalso
        have bad : 0 ‚â§ (-1 : ‚Ñù) := by
          rw [‚Üê h2]
          exact norm_nonneg ((sqrt (1 + t^2)) ‚Ä¢ u)
        linarith
    ¬∑ exact key'
  sorry

theorem hairy_ball {n} {v : E n ‚Üí E n} (h : IsSphVF v) (h' : ‚àÄx, ‚Äñx‚Äñ = 1 ‚Üí v x ‚â† 0) (h'' :
‚àÄ x, ‚Äñx‚Äñ = 1 ‚Üí ‚Äñv x‚Äñ = 1) : Even n := by
  have ss_inj : suff_small_inj (f v) := f_inj h
  sorry



#check volume (ball (0 : E 3) 1)
